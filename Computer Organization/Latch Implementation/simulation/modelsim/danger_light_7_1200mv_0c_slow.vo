// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Lite Edition"

// DATE "10/15/2018 18:31:20"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module danger_light (
	x,
	clock,
	\input ,
	y,
	z);
output 	x;
input 	clock;
input 	\input ;
output 	y;
output 	z;

// Design Ports Information
// x	=>  Location: PIN_G19,	 I/O Standard: 2.5 V,	 Current Strength: Default
// y	=>  Location: PIN_F19,	 I/O Standard: 2.5 V,	 Current Strength: Default
// z	=>  Location: PIN_E19,	 I/O Standard: 2.5 V,	 Current Strength: Default
// input	=>  Location: PIN_AB28,	 I/O Standard: 2.5 V,	 Current Strength: Default
// clock	=>  Location: PIN_AC28,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("danger_light_7_1200mv_0c_v_slow.sdo");
// synopsys translate_on

wire \x~output_o ;
wire \y~output_o ;
wire \z~output_o ;
wire \clock~input_o ;
wire \input~input_o ;
wire \inst16~0_combout ;
wire \inst18~q ;
wire \inst15~0_combout ;
wire \inst17~q ;
wire \inst4~0_combout ;
wire \inst10~combout ;


// Location: IOOBUF_X69_Y73_N16
cycloneive_io_obuf \x~output (
	.i(\inst4~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\x~output_o ),
	.obar());
// synopsys translate_off
defparam \x~output .bus_hold = "false";
defparam \x~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X94_Y73_N2
cycloneive_io_obuf \y~output (
	.i(\inst17~q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\y~output_o ),
	.obar());
// synopsys translate_off
defparam \y~output .bus_hold = "false";
defparam \y~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X94_Y73_N9
cycloneive_io_obuf \z~output (
	.i(\inst10~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\z~output_o ),
	.obar());
// synopsys translate_off
defparam \z~output .bus_hold = "false";
defparam \z~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X115_Y14_N1
cycloneive_io_ibuf \clock~input (
	.i(clock),
	.ibar(gnd),
	.o(\clock~input_o ));
// synopsys translate_off
defparam \clock~input .bus_hold = "false";
defparam \clock~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X115_Y17_N1
cycloneive_io_ibuf \input~input (
	.i(\input ),
	.ibar(gnd),
	.o(\input~input_o ));
// synopsys translate_off
defparam \input~input .bus_hold = "false";
defparam \input~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X114_Y14_N18
cycloneive_lcell_comb \inst16~0 (
// Equation(s):
// \inst16~0_combout  = (!\inst18~q  & \input~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\inst18~q ),
	.datad(\input~input_o ),
	.cin(gnd),
	.combout(\inst16~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst16~0 .lut_mask = 16'h0F00;
defparam \inst16~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: FF_X114_Y14_N19
dffeas inst18(
	.clk(\clock~input_o ),
	.d(\inst16~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst18~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst18.is_wysiwyg = "true";
defparam inst18.power_up = "low";
// synopsys translate_on

// Location: LCCOMB_X114_Y14_N12
cycloneive_lcell_comb \inst15~0 (
// Equation(s):
// \inst15~0_combout  = (\input~input_o  & (\inst17~q  $ (\inst18~q )))

	.dataa(gnd),
	.datab(\input~input_o ),
	.datac(\inst17~q ),
	.datad(\inst18~q ),
	.cin(gnd),
	.combout(\inst15~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst15~0 .lut_mask = 16'h0CC0;
defparam \inst15~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: FF_X114_Y14_N13
dffeas inst17(
	.clk(\clock~input_o ),
	.d(\inst15~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst17~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst17.is_wysiwyg = "true";
defparam inst17.power_up = "low";
// synopsys translate_on

// Location: LCCOMB_X114_Y14_N16
cycloneive_lcell_comb \inst4~0 (
// Equation(s):
// \inst4~0_combout  = (\inst18~q  & \inst17~q )

	.dataa(gnd),
	.datab(gnd),
	.datac(\inst18~q ),
	.datad(\inst17~q ),
	.cin(gnd),
	.combout(\inst4~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst4~0 .lut_mask = 16'hF000;
defparam \inst4~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X114_Y14_N26
cycloneive_lcell_comb inst10(
// Equation(s):
// \inst10~combout  = (\inst18~q ) # (\inst17~q )

	.dataa(gnd),
	.datab(gnd),
	.datac(\inst18~q ),
	.datad(\inst17~q ),
	.cin(gnd),
	.combout(\inst10~combout ),
	.cout());
// synopsys translate_off
defparam inst10.lut_mask = 16'hFFF0;
defparam inst10.sum_lutc_input = "datac";
// synopsys translate_on

assign x = \x~output_o ;

assign y = \y~output_o ;

assign z = \z~output_o ;

endmodule
