// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/06/2018 20:50:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a0;
reg a1;
reg a2;
reg a3;
reg a4;
reg a5;
reg a6;
reg a7;
reg b0;
reg b1;
reg b2;
reg b3;
reg b4;
reg b5;
reg b6;
reg b7;
// wires                                               
wire output0;
wire output1;
wire output3;
wire output4;
wire output5;
wire output6;
wire output7;
wire output8;
wire output9;
wire output10;
wire output11;
wire output12;
wire output13;
wire output14;
wire output15;
wire output16;

// assign statements (if any)                          
final i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.a5(a5),
	.a6(a6),
	.a7(a7),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.b5(b5),
	.b6(b6),
	.b7(b7),
	.output0(output0),
	.output1(output1),
	.output3(output3),
	.output4(output4),
	.output5(output5),
	.output6(output6),
	.output7(output7),
	.output8(output8),
	.output9(output9),
	.output10(output10),
	.output11(output11),
	.output12(output12),
	.output13(output13),
	.output14(output14),
	.output15(output15),
	.output16(output16)
);
initial 
begin 
#1000000 $finish;
end 

// a0
initial
begin
	a0 = 1'b0;
end 

// a1
initial
begin
	a1 = 1'b0;
	a1 = #640000 1'b1;
end 

// a2
initial
begin
	a2 = 1'b0;
	a2 = #320000 1'b1;
	a2 = #320000 1'b0;
	a2 = #320000 1'b1;
end 

// a3
initial
begin
	repeat(3)
	begin
		a3 = 1'b0;
		a3 = #160000 1'b1;
		# 160000;
	end
	a3 = 1'b0;
end 

// a4
initial
begin
	repeat(6)
	begin
		a4 = 1'b0;
		a4 = #80000 1'b1;
		# 80000;
	end
	a4 = 1'b0;
end 

// a5
initial
begin
	repeat(12)
	begin
		a5 = 1'b0;
		a5 = #40000 1'b1;
		# 40000;
	end
	a5 = 1'b0;
end 

// a6
always
begin
	a6 = 1'b0;
	a6 = #20000 1'b1;
	#20000;
end 

// a7
always
begin
	a7 = 1'b0;
	a7 = #10000 1'b1;
	#10000;
end 

// b0
initial
begin
	b0 = 1'b0;
end 

// b1
initial
begin
	b1 = 1'b0;
	b1 = #640000 1'b1;
end 

// b2
initial
begin
	b2 = 1'b0;
	b2 = #320000 1'b1;
	b2 = #320000 1'b0;
	b2 = #320000 1'b1;
end 

// b3
initial
begin
	repeat(3)
	begin
		b3 = 1'b0;
		b3 = #160000 1'b1;
		# 160000;
	end
	b3 = 1'b0;
end 

// b4
initial
begin
	repeat(6)
	begin
		b4 = 1'b0;
		b4 = #80000 1'b1;
		# 80000;
	end
	b4 = 1'b0;
end 

// b5
initial
begin
	repeat(12)
	begin
		b5 = 1'b0;
		b5 = #40000 1'b1;
		# 40000;
	end
	b5 = 1'b0;
end 

// b6
always
begin
	b6 = 1'b0;
	b6 = #20000 1'b1;
	#20000;
end 

// b7
always
begin
	b7 = 1'b0;
	b7 = #10000 1'b1;
	#10000;
end 
endmodule

